/**
 * Created by likaituan on 16/10/19.
 */

var view = require("sys.view");
var template = require("sys.template");
var event = require("sys.event");
var data_bind = require("sys.data_bind");

var app = {};

var cfg = {};

app.config = function (_cfg) {
    for(var k in _cfg){
        cfg[k] = _cfg[k];
    }
};

var getHash = function(){
    var uri = location.hash && location.hash.slice(1) || app.iniPage;
    var params = uri.split("/");
    var page = params.shift();
    if(params.length==1){
        params = {id: params[0]};
    }
    app.go2(page, params);
};

app.init  = function (page) {
    app.iniPage = page;
    getHash();
    window.onhashchange = getHash;
};

//跳转
app.go = function (page) {
    if(/^https?:\/\//.test(page)){
        window.open(page);
    }else{
        location.hash = page;
    }
};

//跳转
app.go2 = function (page, params) {
    var code = require(`${cfg.path}${page}.sk`);
    var jsCode = /<script.*?>([\s\S]+?)<\/script>/.test(code) && RegExp.$1;
    var cssCode = /<style.*?>([\s\S]+?)<\/style>/.test(code) && RegExp.$1;
    var templateCode = /<template.*?>([\s\S]+?)<\/template>/.test(code) && RegExp.$1;
    if(!cssCode && !templateCode && !jsCode){
        jsCode = code.trim();
    }
    if(jsCode){
        app.view = parseModule(jsCode);
    }else if(templateCode) {
        app.view = {};
    }else{
        throw `the "${page}" page mush has a script or template`
    }
    app.view.page = page;
    app.view.params = params;
    log({page,params});
    app.view.render = function(){
        cssCode && app.parseCss(cssCode);
        templateCode && app.parseTemplate(templateCode);
    }

    cssCode && app.parseCss(cssCode);
    templateCode && app.parseTemplate(templateCode);
};

//解析样式
app.parseCss = function (code) {
    var style = document.createElement("style");
    style.type = "text/css";
    style.innerHTML = code;
    document.head.appendChild(style);
};

//解析模版
app.parseTemplate = function (code) {
    var fun = template.compile(code);
    var model = app.view.model || app.view;
    app.onInit && app.onInit(app.view);
    app.view.onInit && app.view.onInit();
    document.body.innerHTML = fun(model);
    view.init.call(app.view, app);
    app.onRender && app.onRender(app.view);
    app.view.onRender && app.view.onRender();
    event.parse(document.body, app.view);
    data_bind.parse(document.body, app.view);
};

module.exports = app;